<?php

namespace common\models;
use common\components\behaviors\ChatLogBehavior;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\Url;
use yii\web\Link;
use yii\web\Linkable;
/**
 * This is the model class for table "task".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property int $author_id
 * @property int $worker_id
 * @property int $deadLine_date
 * @property int $start_date
 * @property int $end_date
 * @property int $status_id
 * @property int $priority_id
 * @property int $created_at
 * @property int $updated_at
 * @property int $project_id
 *
 * @property Comment[] $comments
 * @property Tag[] $tags
 * @property TaskPriority $priority
 * @property TaskStatus $status
 * @property User $author
 * @property User $worker
 * @property Project $project
 */
class Task extends \yii\db\ActiveRecord implements Linkable
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'task';
    }
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['author_id', 'default', 'value' => Yii::$app->user->id],
            ['worker_id', 'default', 'value' => Yii::$app->user->id],
            [['deadLine_date', 'start_date', 'end_date', ], 'default', 'value' => Yii::$app->formatter->asDate('now')],
            [['title', 'description', 'status_id', 'priority_id'], 'required'],
            [['description'], 'string'],
            [['author_id', 'worker_id', 'project_id', 'status_id', 'priority_id'], 'integer'],
            [['title'], 'string', 'max' => 55],
            [['deadLine_date', 'start_date', 'end_date', ], 'date', 'format' => 'php:d.m.Y'],
            [['end_date'], 'validateEndDate'],
            [['deadLine_date'], 'validateDeadLineDate'],
            [['created_at', 'updated_at'], 'safe'],
            [['priority_id'], 'exist', 'skipOnError' => true, 'targetClass' => TaskPriority::class, 'targetAttribute' => ['priority_id' => 'id']],
            [['status_id'], 'exist', 'skipOnError' => true, 'targetClass' => TaskStatus::class, 'targetAttribute' => ['status_id' => 'id']],
            [['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['author_id' => 'id']],
            [['worker_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['worker_id' => 'id']],
            [['project_id'], 'exist', 'skipOnError' => true, 'targetClass' => Project::class, 'targetAttribute' => ['project_id' => 'id']],
        ];
    }
    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID задачи',
            'title' => 'Задача',
            'description' => 'Описание',
            'author_id' => 'Автор задачи',
            'worker_id' => 'Исполнитель',
            'project_id' => 'Проект',
            'deadLine_date' => 'Выполнить до',
            'start_date' => 'Начало',
            'end_date' => 'Окончание',
            'status_id' => 'Статус',
            'priority_id' => 'Приоритет',
            'created_at' => 'Создана',
            'updated_at' => 'Изменение',
        ];
    }
    public function behaviors()
    {
        return [
            'timestampBehavior' => [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                    'value' => time(),
                ],
            ],
            'authorBehavior' => [
                'class' => BlameableBehavior::class,
                'createdByAttribute' => 'author_id',
                'updatedByAttribute' => false,
                'value' => Yii::$app->user->id
            ],
            [
                'class'=>ChatLogBehavior::class,
                'attributes'=>['created_at'],
                'value'=>'123123',
                'qweqweqweqwe'=>['wqeqweqweqwe'],
            ]
        ];
    }
    public function beforeValidate()
    {
        $this->attributes;
        if (Yii::$app->request->isPost) {
            $this->status_id = TaskStatus::IN_PROGRESS_ID;
            $this->priority_id = TaskPriority::MEDIUM_ID;
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    public function beforeSave($insert)
    {
        $this->deadLine_date = Yii::$app->formatter->asTimestamp($this->deadLine_date);
        $this->start_date = Yii::$app->formatter->asTimestamp($this->start_date);
        if (!isset($this->end_date)) {
            $this->end_date = $this->start_date;
        } else {
            $this->end_date = Yii::$app->formatter->asTimestamp($this->end_date);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public function validateEndDate($attribute, $params)
    {
        $startDateTimestamp = Yii::$app->formatter->asTimestamp($this->start_date);
        $endDateTimestamp = Yii::$app->formatter->asTimestamp($this->end_date);
        if (empty($endDateTimestamp)) {
            if ($startDateTimestamp > $endDateTimestamp) {
                $this->addError($attribute, 'Введена некорректная дата.');
            }
        }
    }
    public function validateDeadLineDate($attribute, $params)
    {
        $deadLineDateTimestamp = Yii::$app->formatter->asTimestamp($this->deadLine_date);
        $startDateTimestamp = Yii::$app->formatter->asTimestamp($this->start_date);
        $endDateTimestamp = Yii::$app->formatter->asTimestamp($this->end_date);
        if (empty($deadLineDateTimestamp)) {
            if ($deadLineDateTimestamp < $startDateTimestamp || $deadLineDateTimestamp < $endDateTimestamp) {
                $this->addError($attribute, 'Время выполнения задачи вышло.');
            }
        }
    }
//
//    public function afterFind()
//    {
//        $this->deadLine_date = Yii::$app->formatter->asDate($this->deadLine_date, 'php:d.M.Y');
//        $this->start_date = Yii::$app->formatter->asDate($this->start_date, 'php:d.M.Y');
//        $this->end_date = Yii::$app->formatter->asDate($this->end_date, 'php:d.M.Y');
//        parent::afterFind();
//    }
//    public  function afterSave($insert, $changedAttributes)
//    {
//        if($insert) {
//            ChatLog::saveLog([
//                'username' => Yii::$app->user->identity->username,
//                'message' => 'Создана новая задача: '.$this->title,
//                'task_id' => $this->id,
//            ]);
//        }
//    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::class,
            [
                'task_id' => 'id'
            ]);
    }
    public function getProject()
    {
        return $this->hasOne(Project::class,
            [
                'id' => 'project_id'
            ]);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tag::class,
            ['task_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPriority()
    {
        return $this->hasOne(TaskPriority::class,
            ['id' => 'priority_id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStatus()
    {
        return $this->hasOne(TaskStatus::class,
            ['id' => 'status_id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(User::class,
            ['id' => 'author_id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getWorker()
    {
        return $this->hasOne(User::class,
            ['id' => 'worker_id']);
    }
    public function fields()
    {
        $parentFields =  parent::fields();
        $modelFields = [
            'created_at'=> function() {
                if (isset($this->created_at)){
                    return Yii::$app->formatter->asDatetime($this->created_at);
                }
                return null;
            },
            'updated_at'=> function() {
                if (isset($this->updated_at)){
                    return Yii::$app->formatter->asDatetime($this->updated_at);
                }
                return null;
            },
            'priority_id' => function() {
                return $this->priority->title;
//            выяснить, почему так не работает
//                return TaskPriority::getPriorityTitle() [$this->priority_id];
            },
            'status_id' => function() {
                return $this->status->title;
            },
            'deadLine_date'=> function() {
                if (isset($this->deadLine_date)){
                    return Yii::$app->formatter->asDatetime($this->deadLine_date);
                }
                return null;
            },
            'start_date'=> function() {
                if (isset($this->start_date)){
                    return Yii::$app->formatter->asDatetime($this->start_date);
                }
                return null;
            },
            'end_date'=> function() {
                if (isset($this->end_date)){
                    return Yii::$app->formatter->asDatetime($this->end_date);
                }
                return null;
            },
        ];
        return array_merge($parentFields, $modelFields);
    }
    public function getLinks()
    {
        return [
            Link::REL_SELF => Url::to(['task/view', 'id' => $this->id], true),
            'author' => Url::to(['user/view', 'id' => $this->author_id], true),
        ];
    }
    public function extraFields()
    {
        return [
            'author' => function() {
                $this->author;
            }
        ];
    }
}