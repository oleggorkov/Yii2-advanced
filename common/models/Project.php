<?php

namespace common\models;
use common\components\behaviors\ChatLogBehavior;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\Url;
use yii\web\Link;
use yii\web\Linkable;
/**
 * This is the model class for table "project".
 *
 * @property int $id
 * @property string $title
 * @property int $author_id
 * @property int $project_status_id
 * @property int $created_at
 * @property int $updated_at
 *
 * @property ProjectStatus $projectStatus
 * @property array $links
 * @property User $author
 */
class Project extends \yii\db\ActiveRecord implements Linkable
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'project';
    }
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['author_id', 'default', 'value' => Yii::$app->user->id],
            [['title', 'author_id', 'project_status_id'], 'required'],
            [['project_status_id', 'created_at', 'updated_at'], 'integer'],
            [['title'], 'string', 'max' => 255],
            [
                ['project_status_id'],
                'exist',
                'skipOnError' => true,
                'targetClass' => ProjectStatus::class,
                'targetAttribute' => ['project_status_id' => 'id']
            ],
            [
                ['author_id'],
                'exist',
                'skipOnError' => true,
                'targetClass' => User::class,
                'targetAttribute' => ['author_id' => 'id']
            ],
        ];
    }
    public function behaviors()
    {
        return [
            'timestampBehavior' => [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                    'value' => time(),
                ],
            ],
            'authorBehavior' => [
                'class' => BlameableBehavior::class,
                'createdByAttribute' => 'author_id',
                'updatedByAttribute' => false,
                'value' => Yii::$app->user->id
            ],
            [
                'class'=>ChatLogBehavior::class,
            ]
        ];
    }
    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID проекта',
            'title' => 'Проект',
            'author_id' => 'Автор проекта',
            'project_status_id' => 'Статус проекта',
            'created_at' => 'Проект создан',
            'updated_at' => 'Проект изменен',
        ];
    }
    public function beforeValidate()
    {
        $this->attributes;
        if (Yii::$app->request->isPost) {
            $this->project_status_id = ProjectStatus::IN_PROGRESS_ID;
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProjectStatus()
    {
        return $this->hasOne(ProjectStatus::class,
            ['id' => 'project_status_id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(User::class,
            ['id' => 'author_id']);
    }
    public static function getActiveProjects(): array
    {
        return self::find()
            ->where('project_status_id != :finished_status_id',
                [
                    ":finished_status_id" => ProjectStatus::FINISHED_ID
                ])
            ->all();
    }
    public function fields()
    {
        $parentFields =  parent::fields();
        $modelFields = [
            'created_at'=> function() {
                if (isset($this->created_at)){
                    return Yii::$app->formatter->asDatetime($this->created_at);
                }
                return null;
            },
            'updated_at'=> function() {
                if (isset($this->updated_at)){
                    return Yii::$app->formatter->asDatetime($this->updated_at);
                }
                return null;
            },
            'project_status_id' => function() {
                return $this->projectStatus->title;
            },
        ];
        return array_merge($parentFields, $modelFields);
    }
    public function getLinks()
    {
        return [
            Link::REL_SELF => Url::to(['project/view', 'id' => $this->id], true),
            'author' => Url::to(['user/view', 'id' => $this->author_id], true),
        ];
    }
    public function extraFields()
    {
        return [
            'author' => function() {
                $this->author;
            }
        ];
    }
//    public  function afterSave($insert, $changedAttributes)
//    {
//        if($insert) {
//            ChatLog::saveLog([
//                'username' => Yii::$app->user->identity->username,
//                'message' => 'Создан новый проект: '.$this->title,
//                'project_id' => $this->id,
//            ]);
//        }
//    }
}